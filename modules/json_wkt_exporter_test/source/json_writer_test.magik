#% text_encoding = iso8859_1
_package user
$

def_slotted_exemplar(
	:json_writer_test,
	{},
	{
		:test_case
	})
$

# hackety hack, ensure works
_method internal_text_output_stream.close()
_endmethod
$

_method json_writer_test.test_empty_json()
	_local l_stream << internal_text_output_stream.new()
	_local l_json << json_writer.new(l_stream)

	_self.assert_raised_condition(:user_error, l_json, :close|()|)
_endmethod
$

_method json_writer_test.test_object_empty()
	_local l_stream << internal_text_output_stream.new()
	_local l_json << json_writer.new(l_stream)
	l_json.begin_object()
	l_json.end_object()

	_self.assert_equals("{}", l_stream.string)
_endmethod
$

_method json_writer_test.test_array_empty()
	_local l_stream << internal_text_output_stream.new()
	_local l_json << json_writer.new(l_stream)
	l_json.begin_array()
	l_json.end_array()

	_self.assert_equals("[]", l_stream.string)
_endmethod
$

_method json_writer_test.test_array_single_element()
	_local l_stream << internal_text_output_stream.new()
	_local l_json << json_writer.new(l_stream)

	l_json_writer.begin_array()
	l_json_writer.write_value(:value1)
	l_json_writer.end_array()
	l_json_writer.close()

	_local l_expected << write_string(
				     "[",
				     '"', "value1", '"',
				      "]"
			     )
	_self.assert_equals(l_expected, l_stream.string)
_endmethod
$

_method json_writer_test.test_array_double_element()
	_local l_stream << internal_text_output_stream.new()
	_local l_json << json_writer.new(l_stream)

	l_json_writer.begin_array()
	l_json_writer.write_value(:value1)
	l_json_writer.write_value(:value2)
	l_json_writer.end_array()
	l_json_writer.close()

	_local l_expected << write_string(
				     "[",
				     '"', "value1", '"', ","
				      '"', "value2", '"',
				       "]"
			     )
	_self.assert_equals(l_expected, l_stream.string)
_endmethod
$

_method json_writer_test.test_complex_1()
	_local l_stream << internal_text_output_stream.new()
	_local l_json_writer << json_writer.new(l_stream)

	l_json_writer.begin_object()

	l_json_writer.begin_pair(:pair1)
	l_json_writer.write_value(1)
	
	l_json_writer.begin_pair(:pair2)
	l_json_writer.write_value(2)
	
	l_json_writer.begin_pair(:obj1)
	l_json_writer.begin_object()
	
	l_json_writer.begin_pair(:pair3)
	l_json_writer.write_value(3)
	l_json_writer.end_object()
	
	l_json_writer.end_object()
	l_json_writer.close()

	_local l_expected << write_string("{"
					  '"', "pair1", '"', ": 1,"
					   '"', "pair2", '"', ": 2,",
					    '"', "obj1", '"', ": ",
					     "{", '"', "pair3", '"', ": 3}",
					      "}")
	
	_self.assert_equals(l_expected, l_stream.string)
_endmethod
$



_method json_writer_test.test_nested_array_1()
	_local l_stream << internal_text_output_stream.new()
	_local l_json_writer << json_writer.new(l_stream)

	l_json_writer.begin_array()
		
	l_json_writer.begin_array()
	l_json_writer.write_value(:value1)
	l_json_writer.end_array()
	
	l_json_writer.write_value(:value2)
	l_json_writer.end_array()
	l_json_writer.close()

	_local l_expected << write_string("[",
					  "[", '"', "value1", '"', "],",
					  '"', "value2", '"',
					   "]")
	
	_self.assert_equals(l_expected, l_stream.string)
_endmethod
$

_method json_writer_test.test_nested_array_2()
	_local l_stream << internal_text_output_stream.new()
	_local l_json_writer << json_writer.new(l_stream)

	l_json_writer.begin_array()
		
	l_json_writer.begin_array()
	l_json_writer.write_value(:value1)
	l_json_writer.end_array()

	l_json_writer.begin_array()
	l_json_writer.write_value(:value2)
	l_json_writer.end_array()
	
	l_json_writer.write_value(:value3)
	l_json_writer.end_array()
	l_json_writer.close()

	_local l_expected << write_string("[",
					  "[", '"', "value1", '"', "],",
					  "[", '"', "value2", '"', "],",
					  '"', "value3", '"',
					   "]")
	
	_self.assert_equals(l_expected, l_stream.string)
_endmethod
$

_method json_writer_test.test_nested_array_2()
	_local l_stream << internal_text_output_stream.new()
	_local l_json_writer << json_writer.new(l_stream)

	l_json_writer.begin_array()
		
	l_json_writer.begin_array()
	l_json_writer.write_value(:value1)
	l_json_writer.end_array()
	
	l_json_writer.begin_object()
	l_json_writer.begin_pair(:pair1)
	l_json_writer.write_value(:pair1)
	l_json_writer.end_object()
	
	l_json_writer.write_value(:value3)
	l_json_writer.end_array()
	l_json_writer.close()

	_local l_expected << write_string("[",
					  "[", '"', "value1", '"', "],",
					  "{", '"', "pair1", '"', ": ", '"', "pair1", '"', "},",
					  '"', "value3", '"',
					   "]")
	_self.assert_equals(l_expected, l_stream.string)
_endmethod
$
